return(estimation_ponctuelle)
}
# test de la fonction sur les jeux données
tx_erreur_Synth1_40 = calcul_tx_erreurs_euc(donn_Synth1_40, 20)
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_500 = calcul_tx_erreurs_euc(donn_Synth1_500, 20)
tx_erreur_Synth1_1000 = calcul_tx_erreurs_euc(donn_Synth1_1000, 20)
# afficher resultats
tx_erreur_Synth1_40
tx_erreur_Synth1_100
tx_erreur_Synth1_500
tx_erreur_Synth1_1000
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_100
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_100
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_100
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_100
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_100
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_100
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_100
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_100
calcul_tx_erreurs_euc <- function(X, N){
# initialisation d'une matrice pour récupérer les tx_erreurs_calculés
m = matrix(data = NA, nrow = 20, ncol = 2)
for ( i in 1:N) {
# definition d'un nouveau jeu de données à partir du jeu fournis
donn.sep <- separ1(X[,1:2], X[,3])
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
donn.sep <- separ1(X[,1:2], X[,3])
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
# recuperation de la matrice d'apprentissage
mApp = ceuc.app(Xapp,zapp)
# recupération des vecteurs déduit
# sur l'apprentissage
vApp = ceuc.val(mApp,Xapp)
# sur le test
vTst = ceuc.val(mApp,Xtst)
# calcul du taux d'erreur sur l'ensemble d'apprentissage
simApp = length(which(vApp==zapp))
tx_erreur_app = 1 - (1/nrow(Xapp)) * simApp
# calcul du taux d'erreur sur l'ensemble de test
simTst = length(which(vTst==ztst))
tx_erreur_tst = 1 - (1/nrow(Xtst)) * simTst
# sauvegarde des taux d'erreurs
m[i,] <- c(tx_erreur_app,tx_erreur_tst)
colnames(m) <- c("tx_erreur_app","tx_erreur_tst")
}
# estimation ponctuelle
estimation_ponctuelle = (colSums(m)/N) * 100
return(estimation_ponctuelle)
}
# test de la fonction sur les jeux données
tx_erreur_Synth1_40 = calcul_tx_erreurs_euc(donn_Synth1_40, 20)
tx_erreur_Synth1_100 = calcul_tx_erreurs_euc(donn_Synth1_100, 20)
tx_erreur_Synth1_500 = calcul_tx_erreurs_euc(donn_Synth1_500, 20)
tx_erreur_Synth1_1000 = calcul_tx_erreurs_euc(donn_Synth1_1000, 20)
# afficher resultats
tx_erreur_Synth1_40
tx_erreur_Synth1_100
tx_erreur_Synth1_500
tx_erreur_Synth1_1000
X
z
X
Xapp
nrows(Xapp)
nrow(Xapp)
length(zapp)
front.kppv(Xapp, zapp, 3, 1000)
Kopt_Synth1_40 <- kppv.tune (donn_Synth1_40[,1:2], donn_Synth1_40[,3], donn_Synth1_40[,1:2], donn_Synth1_40[,3], 2*(1:6)-1)
Kopt_Synth1_40 <- kppv.tune (donn_Synth1_40[,1:2], donn_Synth1_40[,3], donn_Synth1_40[,1:2], donn_Synth1_40[,3], 2*(1:6)-1)
Kopt_Synth1_100 <- kppv.tune (donn_Synth1_100[,1:2], donn_Synth1_100[,3], donn_Synth1_100[,1:2], donn_Synth1_100[,3], 2*(1:6)-1)
Kopt_Synth1_500 <- kppv.tune (donn_Synth1_500[,1:2], donn_Synth1_500[,3], donn_Synth1_500[,1:2], donn_Synth1_500[,3], 2*(1:6)-1)
Kopt_Synth1_1000 <- kppv.tune (donn_Synth1_1000[,1:2], donn_Synth1_1000[,3], donn_Synth1_1000[,1:2], donn_Synth1_1000[,3], 2*(1:6)-1)
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,2*(1:6)-1)
kppv.tune <- function(Xapp, zapp, Xval, zval, nppv)
{
#initialisation de la valeur optimale de nombre de voisin à la première
optVoisin = nppv[1]
#création d'une valeur pour se souvenir du nombre de similarite entre le vecteur de validation et le vecteur deduit
#on suppose que toutes les valeurs sont donc différentes ici
nbSimilarite =  0
for ( i in 1:length(nppv)) {
#recuperation des étiquettes estimées à l'aide de nppv[i] voisins
v = kppv.val (Xapp, zapp, nppv[i], as.matrix(Xval))
#intersection des étiquettes prédites pour nppv[i] voisins et des étiquettes zval
#et calcul du nombre de similarité
sim = length(which(v==zval))
#si on detecte que le nouveau vecteur a plus de point commun que le precedent alors on met a jour le meilleur
if(sim > nbSimilarite){
nbSimilarite = sim
optVoisin = nppv[i]
}
}
#on retourne le meilleur nombre de voisin
return(optVoisin)
}
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,2*(1:6)-1)
zval
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
Xval <- donn.sep$Xval
zval <- donn.sep$zval
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
nppv <- 2*(1:6)-1
v = kppv.val (Xapp, zapp, nppv[1], Xval)
v
v = kppv.val (Xapp, zapp, nppv[1], as.matrix(Xval)
)
v
zapp
zval
sim = length(which(v==zval))
sim
length(zval)
v = kppv.val (Xapp, zapp, nppv[2], Xval)
v
sim = length(which(v==zval))
sim
v = kppv.val (Xapp, zapp, nppv[3], Xval)
sim = length(which(v==zval))
sim
distanceTestEnsenmble = distXY(Xtst,Xapp)
distanceTestEnsenmble
distanceTestEnsenmble = distXY(Xapp,Xtst)
distanceTestEnsenmble
Xapp
Kppv = apply(distanceTestEnsenmble,1,order)[1:3,]
Kppv
df = matrix(ztst[Kppv],nrow = K, ncol = nrow(Xapp))
df = matrix(ztst[Kppv],nrow = 3, ncol = nrow(Xapp))
df
v = apply(df,2,function(x) as.numeric(names(which.max(table(x)))))
v
kppv.val <- function(Xapp, zapp, K, Xtst)
{
#calcul des distance entre l'ensemble de test et l'ensemble d'apprentissage
distanceTestEnsenmble = distXY(Xapp,Xtst)
#ensemble des indices des individus des K plus proches voisins
Kppv = apply(distanceTestEnsenmble,1,order)[1:K,]
#inversement des colonnes et des lignes à ce moment
#recuperer les classes de ces k plus proches voisins
df = matrix(ztst[Kppv],nrow = K, ncol = nrow(Xapp))
# retenir pour chaque individus la classe la plus représentée (attention tendance à tendre vers la première classe du coup)
v = apply(df,2,function(x) as.numeric(names(which.max(table(x)))))
return(v)
}
nppv <- 2*(1:6)-1
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,nppv)
kppv.val <- function(Xapp, zapp, K, Xtst)
{
#calcul des distance entre l'ensemble de test et l'ensemble d'apprentissage
distanceTestEnsenmble = distXY(Xapp,Xtst)
#ensemble des indices des individus des K plus proches voisins
Kppv = apply(distanceTestEnsenmble,2,order)[1:K,]
#inversement des colonnes et des lignes à ce moment
#recuperer les classes de ces k plus proches voisins
df = matrix(ztst[Kppv],nrow = K, ncol = nrow(Xapp))
# retenir pour chaque individus la classe la plus représentée (attention tendance à tendre vers la première classe du coup)
v = apply(df,2,function(x) as.numeric(names(which.max(table(x)))))
return(v)
}
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,nppv)
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,nppv)
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,nppv)
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,nppv)
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,nppv)
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
Xval <- donn.sep$Xval
zval <- donn.sep$zval
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
nppv <- 2*(1:6)-1
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,nppv)
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
Xval <- donn.sep$Xval
zval <- donn.sep$zval
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
nppv <- 2*(1:6)-1
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,nppv)
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
Xval <- donn.sep$Xval
zval <- donn.sep$zval
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
nppv <- 2*(1:6)-1
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,nppv)
front.kppv(Xapp, zapp, Kopt, 1000)
kppv.val(Xapp, zapp, 5, Xtst)
calcul_tx_erreurs_kppv <- function(X){
# initialisation d'une matrice pour récupérer les tx_erreurs_calculés
m = matrix(data = NA, nrow = 20, ncol = 3)
nppv <- 2*(1:6)-1
for ( i in 1:N) {
# definition d'un nouveau jeu de données à partir du jeu fournis
# utilisation plusieurs fois de separ2 pour ne pas que Xapp, Xval et Xtst dépendent les uns des autres
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
donn.sep <- separ2(X, z)
Xval <- donn.sep$Xval
zval <- donn.sep$zval
donn.sep <- separ2(X, z)
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
# recuperation du nombre de voisins optimals
Kopt <- kppv.tune(Xapp, zapp, Xval, zval, nppv)
# recuperation de la matrice d'apprentissage
mApp = ceuc.app(Xapp,zapp)
# recupération des vecteurs déduit
# sur l'apprentissage
vApp = kppv.val(Xapp, zapp, Kopt, Xapp)
# sur le test
vTst = kppv.val(Xapp, zapp, Kopt, Xtst)
# calcul du taux d'erreur sur l'ensemble d'apprentissage
simApp = length(which(vApp==zapp))
tx_erreur_app = 1 - (1/nrow(Xapp)) * simApp
# calcul du taux d'erreur sur l'ensemble de test
simTst = length(which(vTst==ztst))
tx_erreur_tst = 1 - (1/nrow(Xtst)) * simTst
# sauvegarde des taux d'erreurs
m[i,] <- c(Kopt,tx_erreur_app,tx_erreur_tst)
colnames(m) <- c("nb_voisins_opt","tx_erreur_app","tx_erreur_tst")
}
# estimation ponctuelle
estimation_ponctuelle = (colSums(m[2:3])/N) * 100
return(estimation_ponctuelle)
}
calcul_tx_erreurs_kppv(donn_Synth1_40)
calcul_tx_erreurs_kppv(donn_Synth1_40,20)
calcul_tx_erreurs_kppv <- function(X, N){
# initialisation d'une matrice pour récupérer les tx_erreurs_calculés
m = matrix(data = NA, nrow = 20, ncol = 3)
nppv <- 2*(1:6)-1
for ( i in 1:N) {
# definition d'un nouveau jeu de données à partir du jeu fournis
# utilisation plusieurs fois de separ2 pour ne pas que Xapp, Xval et Xtst dépendent les uns des autres
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
donn.sep <- separ2(X, z)
Xval <- donn.sep$Xval
zval <- donn.sep$zval
donn.sep <- separ2(X, z)
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
# recuperation du nombre de voisins optimals
Kopt <- kppv.tune(Xapp, zapp, Xval, zval, nppv)
# recuperation de la matrice d'apprentissage
mApp = ceuc.app(Xapp,zapp)
# recupération des vecteurs déduit
# sur l'apprentissage
vApp = kppv.val(Xapp, zapp, Kopt, Xapp)
# sur le test
vTst = kppv.val(Xapp, zapp, Kopt, Xtst)
# calcul du taux d'erreur sur l'ensemble d'apprentissage
simApp = length(which(vApp==zapp))
tx_erreur_app = 1 - (1/nrow(Xapp)) * simApp
# calcul du taux d'erreur sur l'ensemble de test
simTst = length(which(vTst==ztst))
tx_erreur_tst = 1 - (1/nrow(Xtst)) * simTst
# sauvegarde des taux d'erreurs
m[i,] <- c(Kopt,tx_erreur_app,tx_erreur_tst)
colnames(m) <- c("nb_voisins_opt","tx_erreur_app","tx_erreur_tst")
}
# estimation ponctuelle
estimation_ponctuelle = (colSums(m[2:3])/N) * 100
return(estimation_ponctuelle)
}
calcul_tx_erreurs_kppv(donn_Synth1_40,20)
calcul_tx_erreurs_kppv(donn_Synth1_40,20)
calcul_tx_erreurs_kppv <- function(X, N){
# initialisation d'une matrice pour récupérer les tx_erreurs_calculés
m = matrix(data = NA, nrow = 20, ncol = 3)
nppv <- 2*(1:6)-1
for ( i in 1:N) {
# definition d'un nouveau jeu de données à partir du jeu fournis
# utilisation plusieurs fois de separ2 pour ne pas que Xapp, Xval et Xtst dépendent les uns des autres
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
donn.sep <- separ2(X, z)
Xval <- donn.sep$Xval
zval <- donn.sep$zval
donn.sep <- separ2(X, z)
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
# recuperation du nombre de voisins optimals
Kopt <- kppv.tune(Xapp, zapp, Xval, zval, nppv)
# recuperation de la matrice d'apprentissage
mApp = ceuc.app(Xapp,zapp)
# recupération des vecteurs déduit
# sur l'apprentissage
vApp = kppv.val(Xapp, zapp, Kopt, Xapp)
# sur le test
vTst = kppv.val(Xapp, zapp, Kopt, Xtst)
# calcul du taux d'erreur sur l'ensemble d'apprentissage
simApp = length(which(vApp==zapp))
tx_erreur_app = 1 - (1/nrow(Xapp)) * simApp
# calcul du taux d'erreur sur l'ensemble de test
simTst = length(which(vTst==ztst))
tx_erreur_tst = 1 - (1/nrow(Xtst)) * simTst
# sauvegarde des taux d'erreurs
m[i,] <- c(Kopt,tx_erreur_app,tx_erreur_tst)
colnames(m) <- c("nb_voisins_opt","tx_erreur_app","tx_erreur_tst")
}
# estimation ponctuelle
estimation_ponctuelle = (colSums(m)/N) * 100
return(estimation_ponctuelle)
}
calcul_tx_erreurs_kppv(donn_Synth1_40,20)
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
donn.sep <- separ2(X, z)
Xval <- donn.sep$Xval
zval <- donn.sep$zval
donn.sep <- separ2(X, z)
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
Kopt <- kppv.tune(Xapp, zapp, Xval, zval, nppv)
vApp = kppv.val(Xapp, zapp, Kopt, Xapp)
vApp
Xapp
zapp
vTst = kppv.val(Xapp, zapp, Kopt, Xtst)
vTst
simApp = length(which(vApp==zapp))
tx_erreur_app = 1 - (1/nrow(Xapp)) * simApp
tx_erreur_app
vTst
simTst = length(which(vTst==ztst))
tx_erreur_tst = 1 - (1/nrow(Xtst)) * simTst
tx_erreur_tst
simTst = length(which(vTst==ztst))
simTst
ztst
vTst
Xtst
nrow(Xtst)
kppv.val <- function(Xapp, zapp, K, Xtst)
{
#calcul des distance entre l'ensemble de test et l'ensemble d'apprentissage
distanceTestEnsenmble = distXY(Xtst,Xapp)
#ensemble des indices des individus des K plus proches voisins
Kppv = apply(distanceTestEnsenmble,2,order)[1:K,]
#inversement des colonnes et des lignes à ce moment
#recuperer les classes de ces k plus proches voisins
df = matrix(ztst[Kppv],nrow = K, ncol = nrow(Xtst))
# retenir pour chaque individus la classe la plus représentée (attention tendance à tendre vers la première classe du coup)
v = apply(df,2,function(x) as.numeric(names(which.max(table(x)))))
return(v)
}
kppv.val(Xapp, zapp, Kopt, Xapp)
kppv.val(Xapp, zapp, Kopt, Xtst)
kppv.val <- function(Xapp, zapp, K, Xtst)
{
#calcul des distance entre l'ensemble de test et l'ensemble d'apprentissage
distanceTestEnsenmble = distXY(Xtst,Xapp)
#ensemble des indices des individus des K plus proches voisins
Kppv = apply(distanceTestEnsenmble,1,order)[1:K,]
#inversement des colonnes et des lignes à ce moment
#recuperer les classes de ces k plus proches voisins
df = matrix(ztst[Kppv],nrow = K, ncol = nrow(Xtst))
# retenir pour chaque individus la classe la plus représentée (attention tendance à tendre vers la première classe du coup)
v = apply(df,2,function(x) as.numeric(names(which.max(table(x)))))
return(v)
}
kppv.val(Xapp, zapp, Kopt, Xtst)
kppv.val(Xapp, zapp, Kopt, Xapp)
calcul_tx_erreurs_kppv <- function(X, N){
# initialisation d'une matrice pour récupérer les tx_erreurs_calculés
m = matrix(data = NA, nrow = 20, ncol = 3)
nppv <- 2*(1:6)-1
for ( i in 1:N) {
# definition d'un nouveau jeu de données à partir du jeu fournis
# utilisation plusieurs fois de separ2 pour ne pas que Xapp, Xval et Xtst dépendent les uns des autres
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
donn.sep <- separ2(X, z)
Xval <- donn.sep$Xval
zval <- donn.sep$zval
donn.sep <- separ2(X, z)
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
# recuperation du nombre de voisins optimals
Kopt <- kppv.tune(Xapp, zapp, Xval, zval, nppv)
# recupération des vecteurs déduit
# sur l'apprentissage
vApp = kppv.val(Xapp, zapp, Kopt, Xapp)
# sur le test
vTst = kppv.val(Xapp, zapp, Kopt, Xtst)
# calcul du taux d'erreur sur l'ensemble d'apprentissage
simApp = length(which(vApp==zapp))
tx_erreur_app = 1 - (1/nrow(Xapp)) * simApp
# calcul du taux d'erreur sur l'ensemble de test
simTst = length(which(vTst==ztst))
tx_erreur_tst = 1 - (1/nrow(Xtst)) * simTst
# sauvegarde des taux d'erreurs
m[i,] <- c(Kopt,tx_erreur_app,tx_erreur_tst)
colnames(m) <- c("nb_voisins_opt","tx_erreur_app","tx_erreur_tst")
}
# estimation ponctuelle
estimation_ponctuelle = (colSums(m)/N) * 100
return(estimation_ponctuelle)
}
calcul_tx_erreurs_kppv(donn_Synth1_40,20)
calcul_tx_erreurs_kppv <- function(X, N){
# initialisation d'une matrice pour récupérer les tx_erreurs_calculés
m = matrix(data = NA, nrow = 20, ncol = 3)
nppv <- 2*(1:6)-1
for ( i in 1:N) {
# definition d'un nouveau jeu de données à partir du jeu fournis
# utilisation plusieurs fois de separ2 pour ne pas que Xapp, Xval et Xtst dépendent les uns des autres
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
donn.sep <- separ2(X, z)
Xval <- donn.sep$Xval
zval <- donn.sep$zval
donn.sep <- separ2(X, z)
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
# recuperation du nombre de voisins optimals
Kopt <- kppv.tune(Xapp, zapp, Xval, zval, nppv)
# recupération des vecteurs déduit
# sur l'apprentissage
vApp = kppv.val(Xapp, zapp, Kopt, Xapp)
# sur le test
vTst = kppv.val(Xapp, zapp, Kopt, Xtst)
# calcul du taux d'erreur sur l'ensemble d'apprentissage
simApp = length(which(vApp==zapp))
tx_erreur_app = 1 - (1/nrow(Xapp)) * simApp
# calcul du taux d'erreur sur l'ensemble de test
simTst = length(which(vTst==ztst))
tx_erreur_tst = 1 - (1/nrow(Xtst)) * simTst
# sauvegarde des taux d'erreurs
m[i,] <- c(Kopt,tx_erreur_app,tx_erreur_tst)
colnames(m) <- c("nb_voisins_opt","tx_erreur_app","tx_erreur_tst")
}
# estimation ponctuelle
estimation_ponctuelle = (colSums(m)/N)
return(estimation_ponctuelle)
}
calcul_tx_erreurs_kppv(donn_Synth1_40,20)
calcul_tx_erreurs_kppv <- function(X, N){
# initialisation d'une matrice pour récupérer les tx_erreurs_calculés
m = matrix(data = NA, nrow = 20, ncol = 3)
nppv <- 2*(1:6)-1
for ( i in 1:N) {
# definition d'un nouveau jeu de données à partir du jeu fournis
# utilisation plusieurs fois de separ2 pour ne pas que Xapp, Xval et Xtst dépendent les uns des autres
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
donn.sep <- separ2(X, z)
Xval <- donn.sep$Xval
zval <- donn.sep$zval
donn.sep <- separ2(X, z)
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
# recuperation du nombre de voisins optimals
Kopt <- kppv.tune(Xapp, zapp, Xval, zval, nppv)
# recupération des vecteurs déduit
# sur l'apprentissage
vApp = kppv.val(Xapp, zapp, Kopt, Xapp)
# sur le test
vTst = kppv.val(Xapp, zapp, Kopt, Xtst)
# calcul du taux d'erreur sur l'ensemble d'apprentissage
simApp = length(which(vApp==zapp))
tx_erreur_app = 1 - (1/nrow(Xapp)) * simApp
# calcul du taux d'erreur sur l'ensemble de test
simTst = length(which(vTst==ztst))
tx_erreur_tst = 1 - (1/nrow(Xtst)) * simTst
# sauvegarde des taux d'erreurs
m[i,] <- c(Kopt,tx_erreur_app,tx_erreur_tst)
colnames(m) <- c("nb_voisins_opt","tx_erreur_app","tx_erreur_tst")
}
# estimation ponctuelle
estimation_ponctuelle = (colSums(m)/N)
return(estimation_ponctuelle)
}
# test de la fonction sur les jeux données
tx_erreur_Synth1_40_kppv = calcul_tx_erreurs_kppv(donn_Synth1_40, 20)
tx_erreur_Synth1_100_kppv = calcul_tx_erreurs_kppv(donn_Synth1_100, 20)
tx_erreur_Synth1_500_kppv = calcul_tx_erreurs_kppv(donn_Synth1_500, 20)
tx_erreur_Synth1_1000_kppv = calcul_tx_erreurs_kppv(donn_Synth1_1000, 20)
# afficher resultats
tx_erreur_Synth1_40_kppv
tx_erreur_Synth1_100_kppv
tx_erreur_Synth1_500_kppv
tx_erreur_Synth1_1000_kppv
