clusplot(iris[,1:4], cmob3$cluster, color = TRUE, shade = TRUE, labels = 2, main = "Clusplot Classification avec 3 classes")
dev.off()
png(file = "clusplot_iris_10.png")
clusplot(iris[,1:4], iris$Species, color = TRUE, shade = TRUE, labels = 2, main = "Clusplot iris avec les 3 espèces")
dev.off()
png(file = "clusplot_kmeans_2.png",width = 500, height = 400)
clusplot(iris[,1:4],
cmob3$cluster,
color = TRUE,
shade = TRUE,
labels = 2,
pch = c(1:3),
main = "Classification par la méthode des centres mobiles avec 3 classes")
dev.off()
png(file = "clusplot_iris_10.png",width = 500, height = 400)
clusplot(iris[,1:4],
iris$Species,
color = TRUE,
shade = TRUE,
labels = 2,
main = "Classification des iris selon les 3 espèces")
dev.off()
png(file = "clusplot_kmeans_2.png",width = 500, height = 400)
clusplot(iris[,1:4],
cmob3$cluster,
color = TRUE,
shade = TRUE,
labels = 4,
pch = c(1:3),
main = "Classification par la méthode des centres mobiles avec 3 classes")
dev.off()
png(file = "clusplot_iris_10.png",width = 500, height = 400)
clusplot(iris[,1:4],
iris$Species,
color = TRUE,
shade = TRUE,
labels = 2,
main = "Classification des iris selon les 3 espèces")
dev.off()
png(file = "clusplot_kmeans_2.png",width = 500, height = 400)
clusplot(iris[,1:4],
cmob3$cluster,
color = TRUE,
shade = TRUE,
labels = 4,
main = "Classification par la méthode des centres mobiles avec 3 classes")
dev.off()
png(file = "clusplot_iris_10.png",width = 500, height = 400)
clusplot(iris[,1:4],
iris$Species,
color = TRUE,
shade = TRUE,
labels = 2,
main = "Classification des iris selon les 3 espèces")
dev.off()
png(file = "clusplot_kmeans_2.png",width = 500, height = 400)
clusplot(iris[,1:4],
cmob3$cluster,
color = TRUE,
shade = TRUE,
labels = 4,
main = "Classification par la méthode des centres mobiles avec 3 classes")
dev.off()
png(file = "clusplot_iris_10.png",width = 500, height = 400)
clusplot(iris[,1:4],
iris$Species,
color = TRUE,
shade = TRUE,
labels = 4,
main = "Classification des iris selon les 3 espèces")
dev.off()
png(file = "clusplot_kmeans_2.png",width = 500, height = 400)
clusplot(iris[,1:4],
cmob3$cluster,
color = TRUE,
shade = TRUE,
labels = 4,
lines = 1,
main = "Classification par la methode des centres mobiles avec 3 classes")
dev.off()
png(file = "clusplot_iris_10.png",width = 500, height = 400)
clusplot(iris[,1:4],
iris$Species,
color = TRUE,
shade = TRUE,
labels = 4,
lines = 1,
main = "Classification des iris selon les 3 especes")
dev.off()
summary(iris)
mut <- read.csv("mutations2.csv", header=T, row.names=1) mut <- as.dist(mut, diag=T, upper=T)
mut <- read.csv("mutations2.csv", header=T, row.names=1)
mut <- read.csv("mutations2.csv", header=T, row.names=1)
mut <- as.dist(mut, diag=T, upper=T)
mut
mut <- read.csv("mutations2.csv", header=T, row.names=1)
mut
mut <- as.dist(mut, diag=T, upper=T)
mut
summary(mut)
length(mut)
mut.pca = PCA(mut[,1:20], scale.unit=TRUE, ncp=5, graph=T)
library(FactoMineR)
install.packages("FactoMineR")
library(FactoMineR)
mut.pca = PCA(mut[,1:20], scale.unit=TRUE, ncp=5, graph=T)
mut.pca = PCA(mut[,1:10], scale.unit=TRUE, ncp=5, graph=T)
mut.pca = PCA(mut, scale.unit=TRUE, ncp=5, graph=T)
mut <- read.csv("mutations2.csv", header=T, row.names=1)
mut.pca = PCA(mut[,1:20], scale.unit=TRUE, ncp=5, graph=T)
mut.pca
mut.pca = PCA(mut[1:20,], scale.unit=TRUE, ncp=5, graph=T)
mut.pca = PCA(mut[,1:20], scale.unit=TRUE, ncp=5, graph=T)
dimdesc(mut.pca, axes=c(1,2))
dimdesc(mut.pca, axes=c(2,3))
library(stats)
princomp(mut)
mut.princomp = princomp(mut)
mut.princomp = princomp(mut,cor = TRUE)
mut.princomp
mut.princomp.sdev
mut.princomp$sdev
mut.princomp$loaddings
angles.pour.dessiner.un.cercle <- seq (from = 0, to = 2 * pi, by = 0.01)
plot (cos (angles.pour.dessiner.un.cercle),
sin (angles.pour.dessiner.un.cercle),
xlab = "composante principale 1",
ylab = "composante principale 2",
main = "Cercle des corrélations",
type = 'l',
asp = 1)
mut.princomp.v <- t (mut.princomp$loadings) [1:2,]
arrows (0, 0, mut.princomp.v [1,], mut.princomp.v [2,], col="blue")
text (v [1,], v [2, ], colnames (mut.princomp.v))
helice.30.sammon <- sammon (dist (mut.princomp))
library(MASS)
hmut.princomp.sammon <- sammon (dist (mut.princomp))
hmut.princomp.sammon <- sammon (dist (mut))
hmut.princomp.isoMDS <- isoMDS (dist (mut))
plot (hmut.princomp.isoMDS$points, type='l')
glimpse(mut)
library(FactoMineR)
glimpse(mut)
round(mut.pca$eig,2)
inertie=mut.pca$eig[,2]
barplot(inertie,ylab="% d'inertie",names.arg=round(inertie,2))
title("valeurs propres (inerties ou variances de chaque composante) en %")
mut.pca$ind$coord[,1:2]
s3 = Shepard(as.dist(mutations), cmdscale(mutations, k = 4))
s3 = Shepard(as.dist(mutations), cmdscale(mut, k = 4))
s3 = Shepard(as.dist(mut), cmdscale(mut, k = 4))
s3
S3kmeans = kmeans(s3,3, algorithm = "MacQueen")
S3kmeans = kmeans(s3,3)
S3kmeans = kmeans(as.numeric(unlist(s3)),3, algorithm = "MacQueen")
S3kmeans
clusplot(s3,
S3kmeans,
color = TRUE,
shade = TRUE,
labels = 4,
lines = 1,
main = "Classification des iris selon les 3 especes")
clusplot(as.numeric(unlist(s3)),
S3kmeans,
color = TRUE,
shade = TRUE,
labels = 4,
lines = 1,
main = "Classification des iris selon les 3 especes")
clusplot(mut,
S3kmeans,
color = TRUE,
shade = TRUE,
labels = 4,
lines = 1,
main = "Classification des iris selon les 3 especes")
install.packages("polynom")
install.packages("polynom")
x1 = ()
x1 = c(0,0,1,-1)
x1*(1/4)
c1 = c(-0.66,0.82,1.36,-1.52)
c2 = c(1.25,-0.38,-0.07,-0.8)
1.226 * (x1*(1/4))%*%c1
1.8411 * (x1*(1/4))%*%c2
x2 = c(-1,0,0,1)
1.226 * (x2*(1/4))%*%c1
1.226 * (x2*(1/4))%*%c2
x3 = c(-1,1,1,-1)
1.226 * (x3*(1/4))%*%c1
1.226 * (x3*(1/4))%*%c2
1.8411 * (x2*(1/4))%*%c2
1.8411 * (x3*(1/4))%*%c2
x3
diag(4)
1.8411 * (x3%*%diag(4))%*%c2
1.8411 * (t(x3)%*%diag(4))%*%c2
x3
x3/4
1.83 * (x3*(1/4))%*%c2
1.3 * (x3*(1/4))%*%c2
1.3 * (x3*(1/4))%*%c1
0.87 * (x3*(1/4))%*%c1
x1 = c(0,-1, -1)
x2 = c(0,0,1)
x3 = c(1,0,1)
x4 = c(-1,1,-1)
rbind(x1,x2,x3,x4)
princomp(rbind(x1,x2,x3,x4))
ACP = princomp(rbind(x1,x2,x3,x4))
ACP
ACP$sdev
ACP$sdev*ACP$sdev
ACP$scores
ACP$loadings
c1 = c(3.027, 1.971, -4.998)
c2 = c(0.916, -1.055, 0.139)
u1 = c(-0.816,0.578)
u2 = c(-0.578,-0.816)
U = rbind(u1,u2)
U
U = cbind(u1,u2)
U
t(U)
C = cbind(c1,c2)
C
C%*%t(U)
X = C%*%t(U)
X
(1/3)*t(X)%*%X
diag((1/3)*t(X)%*%X)
26/3
14/3
w1 = c(58,-104,46)
w2 = c(-104,202,-98)
w3 = c(46,-98,52)
W = cbind (w1,w2,w3)
W
diag(W)
diag(3)
diag(W)%*%diag(3)
diag(W)%*%t(diag(3))
diag(W)%*%t(diag(3)) - 2W + diag(3)%*%t(diag(W))
diag(W)%*%t(diag(3))
& = diag(W)%*%t(diag(3))
a = diag(W)%*%t(diag(3))
2W
diag(W)%*%t(diag(3)) - 2*W + diag(3)%*%t(diag(W))
2*W
t(diag(3))%*%diag(W) - 2*W + diag(3)%*%t(diag(W))
diag(W)
t = t(diag(W))
t
diag(3)
t %*% diag(3)
v1 = c(1,-1,0)
v2 = c(1,1,2)
w1 = c(13,5,-18)
w2 = c(5,13,-18)
w3 = c(-18,-18,36)
W = cbind(w1,w2,w3)
W
((1/3)*W)
((1/3)*W)%*%v1
((1/3)*W)%*%v2
diag((1/3)W)
diag((1/3)*W)
#TP4
library(MASS)
library(tree)
#first set your setwd() to the main directory
#path to the working directory on the SY09 computer : setwd("Z:/Documents/SY09/TP3")
#setwd("Z:/Documents/SY09/TP4")
#path to the working directory on PL computer:
#setwd("/Users/pierrelouislacorte/Library/Mobile Documents/com~apple~CloudDocs/Documents/5-UTC/3-Cours/SY09/TP4")
setwd("/Users/pierrelouislacorte/Desktop/TP4")
#setwd('/Users/matthieu/Google Drive/Cours/GI04/SY09/TP4')
#import function from fonction directory
setwd("fonctions")
# A COMPLETER
source("anadisc.R")
source("logistic.R")
source("mvdnorm.R")
source("prob.ad.R")
source("prob.log.R")
source("prob.log2.R")
source("separ1.R")
source("tx_erreurs_discriminante.R")
source("tx_erreurs_logistique.R")
source("tx_erreurs_arbre.R")
source("analyse.R")
#import data from donnees directory
setwd("..")
setwd("donnees")
donn_bcw <- read.csv("bcw.csv")
donn_Pima <- read.csv("Pima.csv")
donn_spam <- read.csv("spam.csv")
donn_Synth1_40 <- read.csv("Synth1-40.csv")
donn_Synth1_1000 <- read.csv("Synth1-1000.csv")
donn_Synth2_1000 <- read.csv("Synth2-1000.csv")
donn_Synth3_1000 <- read.csv("Synth3-1000.csv")
setwd("..")
Xapp <- NA
Xtst <- NA
classe <- NA
# declaration des variables
X40 = donn_Synth1_40[,1:2]
z40 = donn_Synth1_40[,3]
X1_1000 = donn_Synth1_1000[,1:2]
z1_1000 = donn_Synth1_1000[,3]
X2_1000 = donn_Synth2_1000[,1:2]
z2_1000 = donn_Synth2_1000[,3]
X3_1000 = donn_Synth3_1000[,1:2]
z3_1000 = donn_Synth3_1000[,3]
XPima = donn_Pima[,1:7]
zPima = donn_Pima[,8]
Xbcw = donn_bcw[,1:9]
zbcw =donn_bcw[,10]
Xspam = donn_spam[,1:58]
zspam = donn_spam[,59]
getAllGraph(X40,z40,"Synth1_40")
getAllGraph(X1_1000,z1_1000,"Synth1_1000")
getAllGraph(X2_1000,z2_1000 ,"Synth2_1000")
getAllGraph(X3_1000,z3_1000 ,"Synth3_1000")
getAllGraph(XPima,zPima,"Pima",F)
getAllGraph(Xbcw,zbcw,"Breastcancer",F,F)
getAllGraph(Xspam,zspam,"spam",F,F)
donn_Pima
plot(Pima)
plot(donn_Pima)
plot(XPima)
plot(XPima,col=c("blue","orange")[zPima])
#TP4
library(MASS)
library(tree)
#first set your setwd() to the main directory
#path to the working directory on the SY09 computer : setwd("Z:/Documents/SY09/TP3")
#setwd("Z:/Documents/SY09/TP4")
#path to the working directory on PL computer:
#setwd("/Users/pierrelouislacorte/Library/Mobile Documents/com~apple~CloudDocs/Documents/5-UTC/3-Cours/SY09/TP4")
setwd('/Users/pierrelouislacorte/Desktop/TP4')
#setwd('/Users/matthieu/Google Drive/Cours/GI04/SY09/TP4')
#import function from fonction directory
setwd("fonctions")
# A COMPLETER
source("anadisc.R")
source("logistic.R")
source("mvdnorm.R")
source("prob.ad.R")
source("prob.log.R")
source("prob.log2.R")
source("separ1.R")
source("tx_erreurs_discriminante.R")
source("tx_erreurs_logistique.R")
source("tx_erreurs_arbre.R")
source("analyse.R")
#import data from donnees directory
setwd("..")
setwd("donnees")
donn_bcw <- read.csv("bcw.csv")
donn_Pima <- read.csv("Pima.csv")
donn_spam <- read.csv("spam.csv")
donn_Synth1_40 <- read.csv("Synth1-40.csv")
donn_Synth1_1000 <- read.csv("Synth1-1000.csv")
donn_Synth2_1000 <- read.csv("Synth2-1000.csv")
donn_Synth3_1000 <- read.csv("Synth3-1000.csv")
setwd("..")
Xapp <- NA
Xtst <- NA
classe <- NA
# declaration des variables
X40 = donn_Synth1_40[,1:2]
z40 = donn_Synth1_40[,3]
X1_1000 = donn_Synth1_1000[,1:2]
z1_1000 = donn_Synth1_1000[,3]
X2_1000 = donn_Synth2_1000[,1:2]
z2_1000 = donn_Synth2_1000[,3]
X3_1000 = donn_Synth3_1000[,1:2]
z3_1000 = donn_Synth3_1000[,3]
XPima = donn_Pima[,1:7]
zPima = donn_Pima[,8]
Xbcw = donn_bcw[,1:9]
zbcw =donn_bcw[,10]
getAllGraph(X40,z40,"Synth1_40",20,F)
getAllGraph(X1_1000,z1_1000,"Synth1_1000",20,F)
getAllGraph(X2_1000,z2_1000 ,"Synth2_1000",20,F)
getAllGraph(X3_1000,z3_1000 ,"Synth3_1000",20,F)
getAllGraph(XPima,zPima,"Pima",100,F)
png(file = "res/global_pima.png",width=400,height=400)
plot(XPima,col=c("blue","orange")[zPima])
dev.off()
cat("res/global_pima.png\n")
getAllGraph(Xbcw,zbcw,"Breastcancer",100,F,F)
#getAllGraph(Xspam,zspam,"spam",20,F,F)
# Random forest on Xspam
Xspam = donn_spam[,2:59]
Xspam$z = as.factor(Xspam$z)
#permet d'obtenir les même résultats à chaque fois (on "fixe" le random)
set.seed(123)
fit = randomForest(formula = z ~ ., data = Xspam, ntree= 2000)
png(file = "res/spam_fit_random_forest.png",width=400,height=400)
varImpPlot(fit)
dev.off()
cat("res/spam_fit_random_forest.png sauvegardee\n")
fit$importance[order(fit$importance[, 1], decreasing = TRUE), ]
# plot de v52 et v53 les variables les plus explicatives
png(file = "res/spam_v52.png",width=400,height=400)
plot(z~V52, data=Xspam)
dev.off()
cat("res/spam_v52.png sauvegardee\n")
png(file = "res/spam_v53.png",width=400,height=400)
plot(z~V53, data=Xspam)
dev.off()
cat("res/spam_v53.png sauvegardee\n")
# plot d'erreur OOB
png(file = "res/spam_erreur_oob.png",width=400,height=400)
plot(fit$err.rate[, 1], type = "l", xlab = "nombre d'arbres", ylab = "erreur OOB")
dev.off()
cat("res/spam_erreur_oob.png sauvegardee\n")
par(mfrow = c(1, 2))
#TP4
library(MASS)
library(tree)
#first set your setwd() to the main directory
#path to the working directory on the SY09 computer : setwd("Z:/Documents/SY09/TP3")
#setwd("Z:/Documents/SY09/TP4")
#path to the working directory on PL computer:
#setwd("/Users/pierrelouislacorte/Library/Mobile Documents/com~apple~CloudDocs/Documents/5-UTC/3-Cours/SY09/TP4")
setwd('/Users/pierrelouislacorte/Desktop/TP4')
#setwd('/Users/matthieu/Google Drive/Cours/GI04/SY09/TP4')
#import function from fonction directory
setwd("fonctions")
# A COMPLETER
source("anadisc.R")
source("logistic.R")
source("mvdnorm.R")
source("prob.ad.R")
source("prob.log.R")
source("prob.log2.R")
source("separ1.R")
source("tx_erreurs_discriminante.R")
source("tx_erreurs_logistique.R")
source("tx_erreurs_arbre.R")
source("analyse.R")
#import data from donnees directory
setwd("..")
setwd("donnees")
donn_bcw <- read.csv("bcw.csv")
donn_Pima <- read.csv("Pima.csv")
donn_spam <- read.csv("spam.csv")
donn_Synth1_40 <- read.csv("Synth1-40.csv")
donn_Synth1_1000 <- read.csv("Synth1-1000.csv")
donn_Synth2_1000 <- read.csv("Synth2-1000.csv")
donn_Synth3_1000 <- read.csv("Synth3-1000.csv")
setwd("..")
Xapp <- NA
Xtst <- NA
classe <- NA
# declaration des variables
X40 = donn_Synth1_40[,1:2]
z40 = donn_Synth1_40[,3]
X1_1000 = donn_Synth1_1000[,1:2]
z1_1000 = donn_Synth1_1000[,3]
X2_1000 = donn_Synth2_1000[,1:2]
z2_1000 = donn_Synth2_1000[,3]
X3_1000 = donn_Synth3_1000[,1:2]
z3_1000 = donn_Synth3_1000[,3]
XPima = donn_Pima[,1:7]
zPima = donn_Pima[,8]
Xbcw = donn_bcw[,1:9]
zbcw =donn_bcw[,10]
getAllGraph(X40,z40,"Synth1_40",20,F)
getAllGraph(X1_1000,z1_1000,"Synth1_1000",20,F)
getAllGraph(X2_1000,z2_1000 ,"Synth2_1000",20,F)
getAllGraph(X3_1000,z3_1000 ,"Synth3_1000",20,F)
getAllGraph(XPima,zPima,"Pima",100,F)
png(file = "res/global_pima.png",width=400,height=400)
plot(XPima,col=c("blue","orange")[zPima])
dev.off()
cat("res/global_pima.png\n")
getAllGraph(Xbcw,zbcw,"Breastcancer",100,F,F)
#getAllGraph(Xspam,zspam,"spam",20,F,F)
# Random forest on Xspam
Xspam = donn_spam[,2:59]
Xspam$z = as.factor(Xspam$z)
#permet d'obtenir les même résultats à chaque fois (on "fixe" le random)
set.seed(123)
fit = randomForest(formula = z ~ ., data = Xspam, ntree= 2000)
png(file = "res/spam_fit_random_forest.png",width=400,height=400)
varImpPlot(fit)
dev.off()
cat("res/spam_fit_random_forest.png sauvegardee\n")
fit$importance[order(fit$importance[, 1], decreasing = TRUE), ]
# plot de v52 et v53 les variables les plus explicatives
png(file = "res/spam_v52.png",width=400,height=400)
plot(z~V52, data=Xspam)
dev.off()
cat("res/spam_v52.png sauvegardee\n")
png(file = "res/spam_v53.png",width=400,height=400)
plot(z~V53, data=Xspam)
dev.off()
cat("res/spam_v53.png sauvegardee\n")
# plot d'erreur OOB
png(file = "res/spam_erreur_oob.png",width=400,height=400)
plot(fit$err.rate[, 1], type = "l", xlab = "nombre d'arbres", ylab = "erreur OOB")
dev.off()
cat("res/spam_erreur_oob.png sauvegardee\n")
par(mfrow = c(1, 2))
summary(Xbcw)
plot(Xbcw,col=c("blue","orange")[zbcw])
plot(Xbcw[,1:5],col=c("blue","orange")[zbcw])
